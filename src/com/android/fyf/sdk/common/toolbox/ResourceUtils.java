package com.android.fyf.sdk.common.toolbox;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;

/**
 * ResourceUtils
 * 
 * @author boyang116245@sohu-inc.com
 * @since 2013-11-18
 */
public class ResourceUtils {

    private static final String TAG = "ResourceUtils";

    /**
     * get an asset using ACCESS_STREAMING mode. This provides access to files
     * that have been bundled with an application as assets -- that is, files
     * placed in to the "assets" directory.
     * 
     * @param context
     * @param fileName The name of the asset to open. This name can be
     *            hierarchical.
     * @return
     */
    public static String getFileFromAssets(Context context, String fileName) throws IOException {
        if (context == null || StringUtils.isEmpty(fileName)) {
            return null;
        }

        StringBuilder s = new StringBuilder("");
        InputStreamReader in = null;
        BufferedReader br = null;
        try {
            in = new InputStreamReader(context.getResources().getAssets().open(fileName));
            br = new BufferedReader(in);
            String line;
            while ((line = br.readLine()) != null) {
                s.append(line);
            }
            return s.toString();
        } finally {
            if (in != null) {
                in.close();
            }

            if (br != null) {
                br.close();
            }
        }
    }

    /**
     * get content from a raw resource. This can only be used with resources
     * whose value is the name of an asset files -- that is, it can be used to
     * open drawable, sound, and raw resources; it will fail on string and color
     * resources.
     * 
     * @param context
     * @param resId The resource identifier to open, as generated by the appt
     *            tool.
     * @return
     */
    public static String getFileFromRaw(Context context, int resId) throws IOException {
        if (context == null) {
            return null;
        }

        StringBuilder s = new StringBuilder();
        InputStreamReader in = null;
        BufferedReader br = null;
        try {
            in = new InputStreamReader(context.getResources().openRawResource(resId));
            br = new BufferedReader(in);
            String line;
            while ((line = br.readLine()) != null) {
                s.append(line);
            }
            return s.toString();
        } finally {
            if (in != null) {
                in.close();
            }

            if (br != null) {
                br.close();
            }
        }
    }

    public static Bitmap getBitmap(Resources res, int id, Config config) {
        Bitmap bitmap = null;
        try {
            BitmapFactory.Options options = new BitmapFactory.Options();
            options.inSampleSize = 1;
            options.inJustDecodeBounds = false;
            options.inDither = false;
            options.inPreferredConfig = config;
            bitmap = BitmapFactory.decodeResource(res, id, options);
        } catch (OutOfMemoryError e) {
            LogUtils.e(TAG, "getBitmap error! ", e);
            return null;
        } catch (IllegalArgumentException e) {
            LogUtils.e(TAG, "getBitmap error! ", e);
            return null;
        }
        return bitmap;
    }

    public static Bitmap getBitmap(Resources res, int id) {
        return getBitmap(res, id, Config.ARGB_8888);
    }
}
